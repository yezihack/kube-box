name: Docker Image CI

on:   # 配置触发workflow的事件
  push:
    branches:   # master分支有push时触发此workflow
      - 'master'
    tags:       # tag更新时触发此workflow
      - '*'
  pull_request:
    branches: [ master ]

# 定义环境变量, 后面会使用
# 定义 APP_NAME 用于 docker build-args
# 定义 DOCKERHUB_REPO 标记 docker hub repo 名称
env:
  # 设置 docker 镜像名
  APP_NAME: kube-box
  DOCKERHUB_REPO: sgfoot/kube-box

jobs:

  build-docker:
    # 在 Ubuntu 上运行
    runs-on: ubuntu-latest
    steps:
      # git checkout 代码
      - name: Checkout
        uses: actions/checkout@v2
      # 设置 QEMU, 后面 docker buildx 依赖此.
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      # 设置 Docker buildx, 方便构建 Multi platform 镜像
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      # 登录 docker hub
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          # GitHub Repo => Settings => Secrets 增加 docker hub 登录密钥信息
          # DOCKERHUB_USERNAME 是 docker hub 账号名.
          # DOCKERHUB_TOKEN: docker hub => Account Setting => Security 创建.
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      # 通过 git 命令获取当前 tag 信息, 存入环境变量 APP_VERSION
      - name: Generate App Version
        run: echo APP_VERSION=`git describe --tags --always` >> $GITHUB_ENV
      # 构建 Docker 并推送到 Docker hub
      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          # 是否 docker push
          push: true
          # 生成多平台镜像, see https://github.com/docker-library/bashbrew/blob/v0.1.1/architecture/oci-platform.go
          platforms: |
            linux/386
            linux/amd64
            linux/arm/v6
            linux/arm/v7
            linux/arm64/v8
          # docker build arg, 注入 APP_NAME/APP_VERSION
          build-args: |
            APP_NAME=${{ env.APP_NAME }}
            APP_VERSION=${{ env.APP_VERSION }}
          # 生成两个 docker tag: ${APP_VERSION} 和 latest
          tags: |
            ${{ env.DOCKERHUB_REPO }}:latest
            ${{ env.DOCKERHUB_REPO }}:${{ env.APP_VERSION }}

  # build:

  #   runs-on: ubuntu-latest

  #   steps:
  #   - uses: actions/checkout@v3
  #       # 构建镜像，指定镜像名
  #   - name: Build image
  #     run: docker build . --file Dockerfile --tag $IMAGE_NAME
  #     # 登录到 dockerhub，使用 GitHub secrets 传入账号密码，密码被加密存储在 GitHub 服务器，添加方法见下图。
  #   - name: Log into registry
  #     run: echo "${{ secrets.ACCESS_TOKEN }}" | docker login -u libra146 --password-stdin

  #   - name: Push image
  #     run: |
  #       # 拼接镜像 id，这个镜像 id 就是在使用 docker 镜像时 pull 后面的名字。
  #       IMAGE_ID=libra146/$IMAGE_NAME

  #       # 将所有的大写字母转为小写
  #       IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')

  #       # 从 GitHub.ref 中取出版本
  #       VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

  #       # 从 tag 名字中替换 v 字符
  #       [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

  #       # Use Docker `latest` tag convention
  #       [ "$VERSION" == "master" ] && VERSION=latest

  #       echo IMAGE_ID=$IMAGE_ID
  #       echo VERSION=$VERSION
  #       # 设置镜像 id 和版本号
  #       docker tag $IMAGE_NAME $IMAGE_ID:$VERSION
  #       # 进行 push
  #       docker push $IMAGE_ID:$VERSION
    
  # test:
  #   runs-on: ubuntu-latest
  #   if: github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags')
  #   steps:
  #     - uses: actions/checkout@v2
  #     - name: Run Unit Tests
  #       run: go test
